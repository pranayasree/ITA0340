activity_main.xml:
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" 
xmlns:app="http://schemas.android.com/apk/res-auto" 
xmlns:tools="http://schemas.android.com/tools" 
android:id="@+id/activity_main"
android:layout_width="match_parent" 
android:layout_height="match_parent" 
android:paddingBottom="@dimen/activity_vertical_margin" 
android:paddingLeft="@dimen/activity_horizontal_margin" 
android:paddingRight="@dimen/activity_horizontal_margin" 
android:paddingTop="@dimen/activity_vertical_margin" 
tools:context="com.tutsplus.mychatapp.MainActivity">
<android.support.design.widget.FloatingActionButton 
android:layout_width="wrap_content" 
android:layout_height="wrap_content" 
android:clickable="true" 
android:src="@drawable/ic_send_black_24dp" 
android:id="@+id/fab" 
android:tint="@android:color/white" 
android:layout_alignParentBottom="true" 
android:layout_alignParentEnd="true"
Mobile Computing and Wireless Communication (2170710)
ACET(CSE
)
Page 38
app:fabSize="mini" />
<android.support.design.widget.TextInputLayout 
android:layout_width="match_parent" 
android:layout_height="wrap_content" 
android:layout_toLeftOf="@id/fab" 
android:layout_alignParentBottom="true" 
android:layout_alignParentStart="true">
<EditText 
android:layout_width="match_parent" 
android:layout_height="wrap_content" 
android:hint="Input" 
android:id="@+id/input"/>
</android.support.design.widget.TextInputLayout>
<ListView 
android:layout_width="match_parent" 
android:layout_height="match_parent" 
android:layout_alignParentTop="true" 
android:layout_alignParentStart="true" 
android:layout_above="@id/fab" 
android:dividerHeight="16dp" 
android:divider="@android:color/transparent" 
android:id="@+id/list_of_messages" 
android:layout_marginBottom="16dp"/>
</RelativeLayout>
message.xml:
Mobile Computing and Wireless Communication (2170710)
ACET(CSE
)
Page 39
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" 
android:layout_width="match_parent" android:layout_height="match_parent">
<TextView 
android:layout_width="wrap_content" 
android:layout_height="wrap_content" 
android:layout_alignParentTop="true" 
android:layout_alignParentStart="true" 
android:id="@+id/message_user" 
android:textStyle="normal|bold" />
<TextView 
android:layout_width="wrap_content" 
android:layout_height="wrap_content"
android:layout_alignBottom="@+id/message_user" 
android:layout_alignParentEnd="true" 
android:id="@+id/message_time" />
<TextView 
android:layout_width="wrap_content" 
android:layout_height="wrap_content" 
android:layout_below="@+id/message_user" 
android:layout_alignParentStart="true" 
android:layout_marginTop="5dp" 
android:id="@+id/message_text"
android:textAppearance="@style/TextAppearance.AppCompat.Body1" 
android:textSize="18sp" />
</RelativeLayout>
Mobile Computing and Wireless Communication (2170710)
ACET(CSE
)
Page 40
ChatMessage.java :
public class ChatMessage { 
private String messageText; 
private String messageUser; 
private long messageTime;
public ChatMessage(String messageText, String messageUser) { 
this.messageText = messageText;
this.messageUser = messageUser;
// Initialize to current time 
messageTime = new Date().getTime();
}
public ChatMessage(){
}
public String getMessageText() { 
return messageText;
}
public void setMessageText(String messageText) { 
this.messageText = messageText;
}
public String getMessageUser() { 
return messageUser;
}
public void setMessageUser(String messageUser) { 
this.messageUser = messageUser;
}
public long getMessageTime() { 
return messageTime;
}
public void setMessageTime(long messageTime) { 
this.messageTime = messageTime;
}
}
Handle User Sign-In
if(FirebaseAuth.getInstance().getCurrentUser() == null) {
// Start sign in/sign up activity 
startActivityForResult(
AuthUI.getInstance()
.createSignInIntentBuilder()
.build(), 
SIGN_IN_REQUEST_CODE
);
} else {
Mobile Computing and Wireless Communication (2170710)
ACET(CSE
)
Page 41
// User is already signed in. Therefore, display
// a welcome Toast 
Toast.makeText(this,
"Welcome " + FirebaseAuth.getInstance()
.getCurrentUser()
.getDisplayName(), 
Toast.LENGTH_LONG)
.show();
// Load chat room contents 
displayChatMessages();
}
@Override
protected void onActivityResult(int requestCode, int resultCode,
Intent data) { 
super.onActivityResult(requestCode, resultCode, data); 
if(requestCode == SIGN_IN_REQUEST_CODE) {
if(resultCode == RESULT_OK) { 
Toast.makeText(this,
"Successfully signed in. Welcome!", 
Toast.LENGTH_LONG)
.show(); 
displayChatMessages();
} else {
Toast.makeText(this,
"We couldn't sign you in. Please try again later.", 
Toast.LENGTH_LONG)
.show();
// Close the app 
finish();
}
}
}
@Override
public boolean onOptionsItemSelected(MenuItem item) { 
if(item.getItemId() == R.id.menu_sign_out) {
AuthUI.getInstance().signOut(this)
.addOnCompleteListener(new OnCompleteListener<Void>() { 
@Override
public void onComplete(@NonNull Task<Void> task) { 
Toast.makeText(MainActivity.this,
"You have been signed out.", 
Toast.LENGTH_LONG)
.show();
// Close activity 
finish();
Mobile Computing and Wireless Communication (2170710)
ACET(CSE
)
Page 42
}
});
}
return true;
}
FloatingActionButton fab = 
(FloatingActionButton)findViewById(R.id.fab);
fab.setOnClickListener(new View.OnClickListener() { 
@Override
public void onClick(View view) {
EditText input = (EditText)findViewById(R.id.input);
// Read the input field and push a new instance
// of ChatMessage to the Firebase database 
FirebaseDatabase.getInstance()
.getReference()
.push()
.setValue(new ChatMessage(input.getText().toString(), 
FirebaseAuth.getInstance()
.getCurrentUser()
.getDisplayName())
}
});
);
// Clear the input 
input.setText("");
ListView listOfMessages = (ListView)findViewById(R.id.list_of_messages); 
adapter = new FirebaseListAdapter<ChatMessage>(this, ChatMessage.class, 
R.layout.message, FirebaseDatabase.getInstance().getReference()) {
@Override
protected void populateView(View v, ChatMessage model, int position) {
// Get references to the views of message.xml
TextView messageText = (TextView)v.findViewById(R.id.message_text); 
TextView messageUser = (TextView)v.findViewById(R.id.message_user); 
TextView messageTime = (TextView)v.findViewById(R.id.message_time);
// Set their text 
messageText.setText(model.getMessageText()); 
messageUser.setText(model.getMessageUser());
// Format the date before showing it 
messageTime.setText(DateFormat.format("dd-MM-yyyy (HH:mm:ss)",
model.getMessageTime()));
}
};